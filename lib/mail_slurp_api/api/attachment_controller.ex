# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule MailSlurpAPI.Api.AttachmentController do
  @moduledoc """
  API calls for all endpoints tagged `AttachmentController`.
  """

  alias MailSlurpAPI.Connection
  import MailSlurpAPI.RequestBuilder


  @doc """
  Upload an attachment for sending using base64 file encoding
  When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.

  ## Parameters

  - connection (MailSlurpAPI.Connection): Connection to server
  - upload_options (UploadAttachmentOptions): uploadOptions
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec upload_attachment(Tesla.Env.client, MailSlurpAPI.Model.UploadAttachmentOptions.t, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def upload_attachment(connection, upload_options, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/attachments")
    |> add_param(:body, :body, upload_options)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, []},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Upload an attachment for sending using file byte stream input octet stream
  When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.

  ## Parameters

  - connection (MailSlurpAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :filename (String.t): Optional filename to save upload with
  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec upload_attachment_bytes(Tesla.Env.client, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def upload_attachment_bytes(connection, opts \\ []) do
    optional_params = %{
      :"filename" => :body
    }
    %{}
    |> method(:post)
    |> url("/attachments/bytes")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, []},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Upload an attachment for sending using Multipart Form
  When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.

  ## Parameters

  - connection (MailSlurpAPI.Connection): Connection to server
  - file (String.t): file
  - opts (KeywordList): [optional] Optional parameters
    - :content_type (String.t): contentType
    - :filename (String.t): filename
    - :x_filename (String.t): x-filename
  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, info} on failure
  """
  @spec upload_multipart_form(Tesla.Env.client, String.t, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def upload_multipart_form(connection, file, opts \\ []) do
    optional_params = %{
      :"contentType" => :query,
      :"filename" => :query,
      :"x-filename" => :query
    }
    %{}
    |> method(:post)
    |> url("/attachments/multipart")
    |> add_param(:file, :"file", file)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, []},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end
end
