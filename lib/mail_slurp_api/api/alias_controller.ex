# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule MailSlurpAPI.Api.AliasController do
  @moduledoc """
  API calls for all endpoints tagged `AliasController`.
  """

  alias MailSlurpAPI.Connection
  import MailSlurpAPI.RequestBuilder


  @doc """
  Create an email alias
  Create an email alias belonging to a user ID. To create anonymous aliases use the `createAnonymousAlias` method.

  ## Parameters

  - connection (MailSlurpAPI.Connection): Connection to server
  - create_owned_alias_options (CreateOwnedAliasOptions): createOwnedAliasOptions
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec create_alias(Tesla.Env.client, MailSlurpAPI.Model.CreateOwnedAliasOptions.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def create_alias(connection, create_owned_alias_options, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/aliases")
    |> add_param(:body, :body, create_owned_alias_options)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, false},
      { 202, %MailSlurpAPI.Model.Alias{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Create an anonymous email alias

  ## Parameters

  - connection (MailSlurpAPI.Connection): Connection to server
  - create_anonymous_alias_options (CreateAnonymousAliasOptions): createAnonymousAliasOptions
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %MailSlurpAPI.Model.Alias{}} on success
  {:error, info} on failure
  """
  @spec create_anonymous_alias(Tesla.Env.client, MailSlurpAPI.Model.CreateAnonymousAliasOptions.t, keyword()) :: {:ok, MailSlurpAPI.Model.Alias.t} | {:error, Tesla.Env.t}
  def create_anonymous_alias(connection, create_anonymous_alias_options, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/aliases/anonymous")
    |> add_param(:body, :body, create_anonymous_alias_options)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %MailSlurpAPI.Model.Alias{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Delete an owned alias

  ## Parameters

  - connection (MailSlurpAPI.Connection): Connection to server
  - alias_id (String.t): aliasId
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_alias(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_alias(connection, alias_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/aliases/#{alias_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 401, false},
      { 403, false}
    ])
  end

  @doc """
  Get an email alias
  Get an email alias by ID

  ## Parameters

  - connection (MailSlurpAPI.Connection): Connection to server
  - alias_id (String.t): aliasId
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %MailSlurpAPI.Model.Alias{}} on success
  {:error, info} on failure
  """
  @spec get_alias(Tesla.Env.client, String.t, keyword()) :: {:ok, MailSlurpAPI.Model.Alias.t} | {:error, Tesla.Env.t}
  def get_alias(connection, alias_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/aliases/#{alias_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %MailSlurpAPI.Model.Alias{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Get all email aliases
  Get all email aliases in paginated form

  ## Parameters

  - connection (MailSlurpAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :page (integer()): Optional page index in alias list pagination
    - :size (integer()): Optional page size in alias list pagination
    - :sort (String.t): Optional createdAt sort direction ASC or DESC
  ## Returns

  {:ok, %MailSlurpAPI.Model.PageAlias{}} on success
  {:error, info} on failure
  """
  @spec get_aliases(Tesla.Env.client, keyword()) :: {:ok, MailSlurpAPI.Model.PageAlias.t} | {:error, Tesla.Env.t}
  def get_aliases(connection, opts \\ []) do
    optional_params = %{
      :"page" => :query,
      :"size" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/aliases")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %MailSlurpAPI.Model.PageAlias{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end

  @doc """
  Update an owned alias

  ## Parameters

  - connection (MailSlurpAPI.Connection): Connection to server
  - alias_id (String.t): aliasId
  - create_owned_alias_options (CreateOwnedAliasOptions): createOwnedAliasOptions
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec update_alias(Tesla.Env.client, String.t, MailSlurpAPI.Model.CreateOwnedAliasOptions.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def update_alias(connection, alias_id, create_owned_alias_options, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/aliases/#{alias_id}")
    |> add_param(:body, :body, create_owned_alias_options)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, false},
      { 202, %MailSlurpAPI.Model.Alias{}},
      { 401, false},
      { 403, false},
      { 404, false}
    ])
  end
end
