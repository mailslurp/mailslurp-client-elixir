# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule MailSlurpAPI.Model.MatchOptions do
  @moduledoc """
  Optional filter for matching emails based on fields. For instance filter results to only include emails whose &#x60;SUBJECT&#x60; value does &#x60;CONTAIN&#x60; given match value. An example payload would be &#x60;{ matches: [{ field: &#39;SUBJECT&#39;, should: &#39;CONTAIN&#39;, value: &#39;Welcome&#39; }] }&#x60;. You can also pass conditions such as &#x60;HAS_ATTACHMENT&#x60;. If you wish to extract regex matches inside the email content see the &#x60;getEmailContentMatch&#x60; method in the EmailController.
  """

  @derive [Poison.Encoder]
  defstruct [
    :"conditions",
    :"matches"
  ]

  @type t :: %__MODULE__{
    :"conditions" => [ConditionOption] | nil,
    :"matches" => [MatchOption] | nil
  }
end

defimpl Poison.Decoder, for: MailSlurpAPI.Model.MatchOptions do
  import MailSlurpAPI.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"conditions", :list, MailSlurpAPI.Model.ConditionOption, options)
    |> deserialize(:"matches", :list, MailSlurpAPI.Model.MatchOption, options)
  end
end

